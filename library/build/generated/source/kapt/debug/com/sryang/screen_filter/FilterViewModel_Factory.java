// Generated by Dagger (https://dagger.dev).
package com.sryang.screen_filter;

import com.example.torang_core.repository.FilterRepository;
import com.example.torang_core.repository.FindRepository;
import com.example.torang_core.repository.MapRepository;
import com.example.torang_core.repository.NationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FilterViewModel_Factory implements Factory<FilterViewModel> {
  private final Provider<MapRepository> mapRepositoryProvider;

  private final Provider<FindRepository> findRepositoryProvider;

  private final Provider<FilterRepository> filterRepositoryProvider;

  private final Provider<NationRepository> nationRepositoryProvider;

  public FilterViewModel_Factory(Provider<MapRepository> mapRepositoryProvider,
      Provider<FindRepository> findRepositoryProvider,
      Provider<FilterRepository> filterRepositoryProvider,
      Provider<NationRepository> nationRepositoryProvider) {
    this.mapRepositoryProvider = mapRepositoryProvider;
    this.findRepositoryProvider = findRepositoryProvider;
    this.filterRepositoryProvider = filterRepositoryProvider;
    this.nationRepositoryProvider = nationRepositoryProvider;
  }

  @Override
  public FilterViewModel get() {
    return newInstance(mapRepositoryProvider.get(), findRepositoryProvider.get(), filterRepositoryProvider.get(), nationRepositoryProvider.get());
  }

  public static FilterViewModel_Factory create(Provider<MapRepository> mapRepositoryProvider,
      Provider<FindRepository> findRepositoryProvider,
      Provider<FilterRepository> filterRepositoryProvider,
      Provider<NationRepository> nationRepositoryProvider) {
    return new FilterViewModel_Factory(mapRepositoryProvider, findRepositoryProvider, filterRepositoryProvider, nationRepositoryProvider);
  }

  public static FilterViewModel newInstance(MapRepository mapRepository,
      FindRepository findRepository, FilterRepository filterRepository,
      NationRepository nationRepository) {
    return new FilterViewModel(mapRepository, findRepository, filterRepository, nationRepository);
  }
}
